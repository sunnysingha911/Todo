{"version":3,"sources":["components/AddItem.js","components/SingleItem.js","components/OutputAll.js","App.js","serviceWorker.js","index.js"],"names":["AddTodoItem","props","sendData","bind","e","preventDefault","newItem","target","addTodoText","value","this","addTodo","className","action","onSubmit","type","name","required","class","aria-hidden","React","Component","SingleItem","state","show","submitForm","newVal","InputText","id","index","console","log","updateTodo","setState","Button","onClick","handleModal","Modal","onHide","Header","closeButton","Body","Footer","removeTodo","Output","myItem","map","val","i","App","item","firstTime","prevstate","concat","filter","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1d3e6a39.chunk.js","sourcesContent":["import React from 'react';\n\nclass AddTodoItem extends React.Component{\n    constructor(props){\n        super(props);\n        this.sendData = this.sendData.bind(this);\n    }\n    sendData(e){\n        e.preventDefault();\n        let newItem = e.target.addTodoText.value;\n        this.props.addTodo(newItem);\n    }\n    render() {\n        return (\n            <div className=\"container\">\n                <br/>\n                <form action=\"\" onSubmit={this.sendData}>\n                    <div className=\"card\">\n                        <div className=\"row justify-content-center\">\n                            <h1>Todo App</h1>\n                        </div>\n                        <div className=\"card-body\">\n                            <div className=\"row justify-content-center\">\n                                <div className=\"col-5\">\n                                    <input className=\"form-control\" type=\"text\" name=\"addTodoText\" required/>\n                                </div>\n                                <div className=\"col-2\">\n                                    <button className=\"btn btn-primary\">Add  <i class=\"fa fa-plus-circle\" aria-hidden=\"true\"></i></button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default AddTodoItem;","import React from 'react';\nimport {Modal,Button} from 'react-bootstrap';\n\nclass SingleItem extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            show: false\n        };\n        this.submitForm = this.submitForm.bind(this);\n    }\n    submitForm(e){\n        e.preventDefault();\n        let newVal = e.target.InputText.value;\n        let id = this.props.index;\n        console.log(id);\n        this.props.updateTodo(newVal,id);\n\n    }\n    handleModal(){\n        this.setState({\n            show: !this.state.show\n        })\n    }\n    render() {\n        return (\n            <li className=\"list-group-item\">\n                <div className=\"row justify-content-center\">               \n                    <div className=\"col-5\">\n                        {this.props.value}\n                    </div>\n                    <div className=\"col-2\">\n                        <Button className=\"btn btn-warning\" onClick={()=>{this.handleModal()}}>Update <i class=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i></Button>\n                            <Modal show={this.state.show} onHide={()=>this.handleModal()}>\n                                <Modal.Header closeButton>Update Todo</Modal.Header>\n                                <form action=\"\" onSubmit={this.submitForm}>\n                                    <Modal.Body>\n                                        <input className=\"form-control\" type=\"text\" name=\"InputText\" id=\"\"/>\n                                    </Modal.Body>\n                                    <Modal.Footer>  \n                                        <button className=\"btn btn-warning\" onClick={()=>{this.handleModal()}}>Update</button>\n                                        <Button onClick={()=>{this.handleModal()}}>Close</Button>\n                                    </Modal.Footer>\n                                </form>\n                            </Modal>\n                    </div>\n                    <div className=\"col-2\">\n                        <button className=\"btn btn-danger\" onClick={()=>{this.props.removeTodo(this.props.index)}}>Remove  <i class=\"fa fa-trash\" aria-hidden=\"true\"></i></button>\n                    </div>\n                </div>\n            </li>\n        )\n    }\n}\nexport default SingleItem;","import React from 'react';\nimport Single from './SingleItem';\n\nclass Output extends React.Component{\n    \n    render() {\n        return (\n            <div className=\"card\">\n                <div className=\"card-body\">\n                    <ul className=\"list-group\">\n                        {\n                            this.props.myItem.map((val,i)=>{\n                                return <Single value={val} updateTodo={this.props.updateTodo} index={i} removeTodo={this.props.removeTodo}/>\n                            })\n                        }\n                    </ul>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Output;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport AddTodoItem from './components/AddItem';\nimport Output from './components/OutputAll';\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.addTodo = this.addTodo.bind(this);\n    this.removeTodo = this.removeTodo.bind(this);\n    this.updateTodo = this.updateTodo.bind(this);\n    this.state={\n      item:[],\n      firstTime:true\n    }\n  }\n\n  addTodo(item){\n    this.setState(prevstate=>{\n      return{\n        item:prevstate.item.concat(item),\n        firstTime:false\n      }\n    })\n  }\n\n  updateTodo(item,index){\n    this.setState(prevstate=>{\n      let newTodo = prevstate.item.map((val,i)=>{\n        if(i===index)\n          return val = item;\n        else\n          return val;\n      });\n      return{\n        item: newTodo\n      }\n    })\n  }\n\n  removeTodo(index){\n    this.setState(prevstate=>{\n      return{\n        item: prevstate.item.filter((val,i)=>i!==index)\n      }\n    })\n  }\n\n  render() {\n    let item;\n    if(!this.state.firstTime)\n      if(this.state.item.length>0)\n        item = <Output removeTodo={this.removeTodo} updateTodo={this.updateTodo} myItem={this.state.item} firstTime={this.state.firstTime}/>\n      else\n        item = <div className=\"card\">\n                <div className=\"card-body\">\n                  All todos completed\n                </div>\n              </div>\n    else\n      item = <div className=\"card\">\n              <div className=\"card-body\">\n                No todos yet\n              </div>\n            </div>\n    return (\n      <div className=\"container\">\n        <AddTodoItem addTodo={this.addTodo}/>\n        <br/>\n        {item}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}